{"name": "test_02[udata2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom disconnected: received Inspector.detached event\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00C58BD3+2395091]\n\tOrdinal0 [0x00BEACA1+1944737]\n\tOrdinal0 [0x00ADD008+839688]\n\tOrdinal0 [0x00ACF21E+782878]\n\tOrdinal0 [0x00ACEE0F+781839]\n\tOrdinal0 [0x00ACE426+779302]\n\tOrdinal0 [0x00ACD335+774965]\n\tOrdinal0 [0x00ACD938+776504]\n\tOrdinal0 [0x00AD95D0+824784]\n\tOrdinal0 [0x00ACEC1D+781341]\n\tOrdinal0 [0x00ACF7F8+784376]\n\tOrdinal0 [0x00ACEE2A+781866]\n\tOrdinal0 [0x00ACE426+779302]\n\tOrdinal0 [0x00ACD335+774965]\n\tOrdinal0 [0x00ACD80D+776205]\n\tOrdinal0 [0x00ADE80A+845834]\n\tOrdinal0 [0x00B3541D+1201181]\n\tOrdinal0 [0x00B24BBC+1133500]\n\tOrdinal0 [0x00B34D62+1199458]\n\tOrdinal0 [0x00B249D6+1133014]\n\tOrdinal0 [0x00AFEF76+978806]\n\tOrdinal0 [0x00AFFE86+982662]\n\tGetHandleVerifier [0x00E0C912+1719138]\n\tGetHandleVerifier [0x00EBB2CD+2434333]\n\tGetHandleVerifier [0x00CF4001+569937]\n\tGetHandleVerifier [0x00CF3066+565942]\n\tOrdinal0 [0x00BF265B+1975899]\n\tOrdinal0 [0x00BF72A8+1995432]\n\tOrdinal0 [0x00BF7395+1995669]\n\tOrdinal0 [0x00C002F1+2032369]\n\tBaseThreadInitThunk [0x761D6739+25]\n\tRtlGetFullPathName_UEx [0x77758FEF+1215]\n\tRtlGetFullPathName_UEx [0x77758FBD+1165]", "trace": "@pytest.fixture(scope='session')\n    def driver():\n        driver = webdriver.Chrome()\n        lp = LoginPage(driver)\n>       lp.login('admin', '123456')\n\ncolor\\test_case\\test_case1.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncolor\\page_object\\login_page.py:15: in login\n    self.geturl(self.url)\ncolor\\base\\base_page.py:16: in geturl\n    self.driver.get(url)\nD:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\nD:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200EA316640>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...unk [0x761D6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77758FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77758FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from disconnected: received Inspector.detached event\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00C58BD3+2395091]\nE       \tOrdinal0 [0x00BEACA1+1944737]\nE       \tOrdinal0 [0x00ADD008+839688]\nE       \tOrdinal0 [0x00ACF21E+782878]\nE       \tOrdinal0 [0x00ACEE0F+781839]\nE       \tOrdinal0 [0x00ACE426+779302]\nE       \tOrdinal0 [0x00ACD335+774965]\nE       \tOrdinal0 [0x00ACD938+776504]\nE       \tOrdinal0 [0x00AD95D0+824784]\nE       \tOrdinal0 [0x00ACEC1D+781341]\nE       \tOrdinal0 [0x00ACF7F8+784376]\nE       \tOrdinal0 [0x00ACEE2A+781866]\nE       \tOrdinal0 [0x00ACE426+779302]\nE       \tOrdinal0 [0x00ACD335+774965]\nE       \tOrdinal0 [0x00ACD80D+776205]\nE       \tOrdinal0 [0x00ADE80A+845834]\nE       \tOrdinal0 [0x00B3541D+1201181]\nE       \tOrdinal0 [0x00B24BBC+1133500]\nE       \tOrdinal0 [0x00B34D62+1199458]\nE       \tOrdinal0 [0x00B249D6+1133014]\nE       \tOrdinal0 [0x00AFEF76+978806]\nE       \tOrdinal0 [0x00AFFE86+982662]\nE       \tGetHandleVerifier [0x00E0C912+1719138]\nE       \tGetHandleVerifier [0x00EBB2CD+2434333]\nE       \tGetHandleVerifier [0x00CF4001+569937]\nE       \tGetHandleVerifier [0x00CF3066+565942]\nE       \tOrdinal0 [0x00BF265B+1975899]\nE       \tOrdinal0 [0x00BF72A8+1995432]\nE       \tOrdinal0 [0x00BF7395+1995669]\nE       \tOrdinal0 [0x00C002F1+2032369]\nE       \tBaseThreadInitThunk [0x761D6739+25]\nE       \tRtlGetFullPathName_UEx [0x77758FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x77758FBD+1165]\n\nD:\\Python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "description": "添加色彩用例", "parameters": [{"name": "udata", "value": "{'name': 'test', 'l': 1, 'a': '', 'b': '', 'assert': '请输入a值'}"}], "start": 1656651978320, "stop": 1656651978320, "uuid": "52fc9a96-eda8-4c5e-90eb-6f3b2d7fe47a", "historyId": "ddc2cb9be540c08c8c73051153e721c3", "testCaseId": "b3c2c550b6d27964646ab4d2f0573080", "fullName": "color.test_case.test_case1#test_02", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "color.test_case"}, {"name": "suite", "value": "test_case1"}, {"name": "host", "value": "LAPTOP-UAP2N13R"}, {"name": "thread", "value": "45432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "color.test_case.test_case1"}]}